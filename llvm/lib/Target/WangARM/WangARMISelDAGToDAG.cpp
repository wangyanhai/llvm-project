#include "WangARM.h"
#include "WangARMTargetMachine.h"
#include "llvm/ADT/StringSwitch.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Target/TargetOptions.h"

using namespace llvm;

#define DEBUG_TYPE "wangarm-isel"

//===--------------------------------------------------------------------===//
/// WangARMDAGToDAGISel - WangARM specific code to select ARM machine
/// instructions for SelectionDAG operations.
///
namespace llvm{
class WangARMDAGToDAGISel : public SelectionDAGISel {
public:
  explicit WangARMDAGToDAGISel(WangARMTargetMachine &tm,
                               CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(tm, OptLevel) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    SelectionDAGISel::runOnMachineFunction(MF);
	
    return true;
  }

  StringRef getPassName() const override {
    return "WangARM Instruction Selection";
  }

  void Select(SDNode *N) override;

  // Include the pieces autogenerated from the target description.
  #include "WangARMGenDAGISel.inc"
};


	void WangARMDAGToDAGISel::Select(SDNode *N) { 
		SelectCode(N); 
	}

 } // namespace

/// createWangARMISelDag - This pass converts a legalized DAG into a
/// WangARM-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createWangARMISelDag(WangARMTargetMachine &TM,
                                         CodeGenOpt::Level OptLevel) {
  return new WangARMDAGToDAGISel(TM, OptLevel);
  //return NULL;
}